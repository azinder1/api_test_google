<%= form_tag landing_index_path %>
  
<% end %>

<div id="map-canvas"></div>

<div id="location_finder"></div>
<script>
  // taking what was returned and drawing it as a object
     function initMap() {
       var map = new google.maps.Map(document.getElementById('map-canvas'), {
         center: {lat: <%= @lat %>, lng: <%= @lng %>},
         zoom: 6

       });

// ADDS REVERSE GEOCODING ON CLICK
      var geocoder = new google.maps.Geocoder();

      google.maps.event.addListener(map, 'click', function(event) {
        geocoder.geocode({
          'latLng': event.latLng
        }, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            if (results[0]) {
              $("#location_finder").text(results[0].formatted_address);
            }
          }
        });
      });
         }//  end
//
// SEARCH BOX
function initAutocomplete() {
  console.log("hello")
        var map = new google.maps.Map(document.getElementById('map-canvas'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
// end


//ADDS DRAWING TOOLS
      //  var drawingManager = new google.maps.drawing.DrawingManager({
      //    drawingMode: google.maps.drawing.OverlayType.MARKER,
      //    drawingControl: true,
      //    drawingControlOptions: {
      //      position: google.maps.ControlPosition.TOP_CENTER,
      //      drawingModes: ['marker', 'circle', 'polygon', 'polyline', 'rectangle']
      //    },
      //    markerOptions: {icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png'},
      //    circleOptions: {
      //      fillColor: '#ffff00',
      //      fillOpacity: 1,
      //      strokeWeight: 5,
      //      clickable: false,
      //      editable: true,
      //      zIndex: 1
      //    }
      //  });
      //  drawingManager.setMap(map);

   </script>
